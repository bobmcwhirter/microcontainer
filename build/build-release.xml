<!-- JBoss Release Build Script
$Id$

Structure: This script creates a self contained release structure rooted
under a directory corresponding to the release version number. Under this
are the cvs source tree and dist binaries. The structure for the jboss-3.2.4RC2
release would be:

3.2.4RC2
+ jboss-3.2 - the cvs source tree tagged with JBoss_3_2_4_RC2
+ dist - the release binaries

Prequisites:
1. The cvs branch to build the release for must have been tagged with the
release tag, for example, JBoss_3_2_3, JBoss_3_2_4_RC2, etc:

[starksm@cvs releases]$ cvs rtag -r Branch_3_2 JBoss_3_2_4_RC2 jboss-3.2

Steps:
1a. Take the build/release-build.xml file from the branch cvs tree
and move it to the parent directory which will contain the release
build. For example /usr/jboss/releases.

1b. If you don't have the release cvs branch, you can co just the release-build.xml
using a co like:

cvs co -r Branch_3_2 _jboss_build/release-build.xml

Now you need to create a release.properties file containing the version
properties to use for the release branch checkout. For example, the
JBoss_3_2_4_RC2 release properties would be:

# The cvs module name, jboss-head, jboss-4.0, jboss-3.2, etc.
cvs.module=jboss-3.2
# The release version properties. These will be validated against
# the corresponding version.major, version.minor, version.revision,
# and version.tag as seen in the source tree build-common.xml 
release.version.major=3
release.version.minor=2
release.version.revision=5
release.version.tag=

2. Optionally checkout the tagged cvs release branch using the
cvs-co target. If you have already have the correct working dir
checked out under the release 

-->
<project name="Build Release" default="release">
   <!-- Pickup the expected release version properties -->
   <property file="release.properties"/>
   <!-- Validate the release.properties values -->
   <fail unless="release.version.major">
   The release.version.major is not defined. Create a release.properties with:
# The release version properties. These will be validated against
# the corresponding version.major, version.minor, version.revision,
# and version.tag as seen in the source tree build-common.xml 
release.version.major=X
release.version.minor=Y
release.version.revision=X
release.version.tag=T
   </fail>

   <!-- Include the environment properties -->
   <property environment="env" />
   <!-- The cvs top level module name -->
   <property name="cvs.module" value="jboss-head"/>
   <property name="cvs.tag" value="JBoss_${release.version.major}_${release.version.minor}_${release.version.revision}_${release.version.tag}"/>
   <!-- -->
   <property name="version" value="${release.version.major}.${release.version.minor}.${release.version.revision}${release.version.tag}"/>
   <property name="jboss.id" value="jboss-${version}"/>
   <property name="jboss.build.dir"
      value="${version}/${cvs.module}/build"/>
   <property name="jboss.dist"
      value="${jboss.build.dir}/output/jboss-${version}"/>
   <property name="jboss.tests"
      value="${version}/${cvs.module}/testsuite/output/reports/html"/>
   <property name="jboss.thirdparty"
      value="${version}/${cvs.module}/thirdparty"/>

   <patternset id="source.ignore">
      <exclude name="**/output/**"/>
      <exclude name="**/CVS/**"/>
      <exclude name="**/local.properties"/>
   </patternset>

   <target name="cvs-co"
      description="Checkout the release cvs cvs.module using the env CVSROOT">
      <echo message="Checking out ${cvs.module} on branch ${cvs.tag}"/>
      <echo message="CVSROOT=${env.CVSROOT}, CVS_RSH=${env.CVS_RSH}" /> 
      <cvs command="checkout"
         cvsRoot="${env.CVSROOT}" cvsRsh="${env.CVS_RSH}"
         package="${cvs.module}"
         tag="${cvs.tag}"
         dest="${version}"
         error="cvs.error" output="cvs.log"/>
   </target>

   <!-- Validate the source tree version properties against the release.properties -->
   <import file="${version}/${cvs.module}/tools/etc/buildmagic/version-info.xml"
      optional="true" />
   <target name="build-dist" description="Builds the dist">
      <fail>
        <condition>
          <not>
             <and>
               <equals arg1="${release.version.major}" arg2="${version.major}" />
               <equals arg1="${release.version.minor}" arg2="${version.minor}" />
               <equals arg1="${release.version.revision}" arg2="${version.revision}" />
               <equals arg1="${release.version.tag}" arg2="${version.tag}" />
             </and>
          </not>
        </condition>
        The release.version.* properties to not match the version.* values:
        release.version.major (${release.version.major}) != version.major (${version.major})
        release.version.minor (${release.version.minor}) != version.minor (${version.minor})
        release.version.revision (${release.version.revision}) != version.revision (${version.revision})
        release.version.tag (${release.version.tag}) != version.tag (${version.tag})
        Check the ${version}/${cvs.module}/tools/etc/buildmagic/version-info.xml
      </fail>
      <ant antfile="build.xml"
         dir="${version}/${cvs.module}/build" />
      <antcall target="version-release" />
   </target>

   <target name="version-release"
      description="Versions the dist jars and creates a jars-release.version.xml">
      <javac destdir=".">
         <src path="${jboss.build.dir}"/>
         <include name="VersionRelease.java"/>
      </javac>
      <echo message="Versioning: jboss-${version}" /> 
      <java classname="VersionRelease">
         <arg value="${jboss.dist}"/>
         <classpath>
            <pathelement location="."/>
         </classpath>
         <syspropertyset>
            <propertyref prefix="version"/>
            <propertyref prefix="specification"/>
            <propertyref prefix="implementation"/>
         </syspropertyset>
      </java>
   </target>

   <target name="release"
      depends="bundle-docs, bin-tgz, bin-zip, source-tgz"
      description="Creates the release binary and source archives from the dist"
      >
      <!-- Build a war of the release DTDs -->
      <war destfile="${version}/dist/dtds.war"
         webxml="${jboss.build.dir}/etc/web.xml">
         <webinf dir="${jboss.build.dir}/etc">
            <include name="jboss-web.xml" />
         </webinf>
         <fileset dir="${jboss.dist}/docs">
            <include name="dtd/**" />
         </fileset>
      </war>
   </target>

   <target name="bundle-docs"
      description="Include license, readme, etc">
      <!-- Copy the thirdparty/licenses to docs/licenses -->
      <copy todir="${jboss.dist}/docs/licenses">
         <fileset dir="${jboss.thirdparty}/licenses"/>
      </copy>
      <!-- Copy the build/docs to the dist root --> 
      <copy todir="${jboss.dist}">
         <fileset dir="${jboss.build.dir}/docs"/>
      </copy>
   </target>

   <target name="bin-tgz"
      description="Build .tar.gz and .tar.bz2 archives">
      <mkdir dir="${version}/dist"/>
      <mkdir dir="${jboss.tests}"/>

      <tar destfile="${version}/dist/${jboss.id}.tar.gz"
         longfile="gnu" compression="gzip">
         <tarfileset dir="${jboss.dist}"
            prefix="${jboss.id}">
            <exclude name="**/data/**"/>
            <exclude name="**/log/**"/>
            <exclude name="**/tmp/**"/>
            <exclude name="**/work/**"/>
            <exclude name="bin/*"/>
         </tarfileset>
         <tarfileset dir="${jboss.dist}"
            prefix="${jboss.id}" mode="755">
            <include name="bin/*"/>
         </tarfileset>
         <tarfileset dir="${jboss.tests}"
            prefix="${jboss.id}/docs/tests">
         </tarfileset>
      </tar>
      <checksum file="${version}/dist/${jboss.id}.tar.gz" />

      <tar destfile="${version}/dist/${jboss.id}.tar.bz2"
         longfile="gnu" compression="bzip2">
         <tarfileset dir="${jboss.dist}"
            prefix="${jboss.id}">
            <exclude name="**/data/**"/>
            <exclude name="**/log/**"/>
            <exclude name="**/tmp/**"/>
            <exclude name="**/work/**"/>
            <exclude name="bin/*"/>
         </tarfileset>
         <tarfileset dir="${jboss.dist}"
            prefix="${jboss.id}" mode="755">
            <include name="bin/*"/>
         </tarfileset>
         <tarfileset dir="${jboss.tests}"
            prefix="${jboss.id}/docs/tests">
         </tarfileset>
      </tar>
      <checksum file="${version}/dist/${jboss.id}.tar.bz2" />
   </target>

   <target name="bin-zip" description="Build zip archive">
      <mkdir dir="${version}/dist"/>
      <zip destfile="${version}/dist/${jboss.id}.zip">
         <zipfileset dir="${jboss.dist}"
            prefix="${jboss.id}">
            <exclude name="**/data/**"/>
            <exclude name="**/log/**"/>
            <exclude name="**/tmp/**"/>
            <exclude name="**/work/**"/>
            <exclude name="tmp/**"/>
         </zipfileset>
         <zipfileset dir="${jboss.tests}"
            prefix="${jboss.id}/docs/tests">
         </zipfileset>
      </zip>
      <checksum file="${version}/dist/${jboss.id}.zip" />
   </target>

   <target name="source-tgz">
      <tar destfile="${version}/dist/${jboss.id}-src.tar.gz"
         longfile="gnu" compression="gzip">
         <tarfileset dir="${version}/${cvs.module}"
            prefix="${jboss.id}-src">
            <patternset refid="source.ignore"/>
            <exclude name="tools/bin/*"/>
         </tarfileset>
         <tarfileset dir="${version}/${cvs.module}"
            prefix="${jboss.id}-src" mode="755">
            <patternset refid="source.ignore"/>
            <include name="tools/bin/*"/>
         </tarfileset>
      </tar>
      <checksum file="${version}/dist/${jboss.id}-src.tar.gz" />

      <tar destfile="${version}/dist/${jboss.id}-src.tar.bz2"
         longfile="gnu" compression="bzip2">
         <tarfileset dir="${version}/${cvs.module}"
            prefix="${jboss.id}-src">
            <patternset refid="source.ignore"/>
            <exclude name="tools/bin/*"/>
         </tarfileset>
         <tarfileset dir="${version}/${cvs.module}"
            prefix="${jboss.id}-src" mode="755">
            <patternset refid="source.ignore"/>
            <include name="tools/bin/*"/>
         </tarfileset>
      </tar>
      <checksum file="${version}/dist/${jboss.id}-src.tar.bz2" />
   </target>

   <target name="clean">
   </target>
</project>

